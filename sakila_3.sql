USE sakila;

SELECT * FROM category;
SELECT * FROM film;
SELECT * FROM film_category;

-- List the number of films per category.
SELECT 
    c.name AS category,
    COUNT(*) AS film_count
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY film_count DESC;

-- Retrieve the store ID, city, and country for each store.
SELECT * FROM store;
SELECT * FROM address;
SELECT * FROM city;
SELECT * FROM country;

SELECT 
    s.store_id,
    ci.city,
    co.country
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT * FROM payment; -- staff_id and amount
SELECT * FROM store; -- manager_staff_id 
SELECT * FROM staff; -- staff_id and store_id

SELECT 
    st.store_id,
    SUM(p.amount) AS total_revenue
FROM payment p
JOIN staff s ON p.staff_id = s.staff_id
JOIN store st ON s.store_id = st.store_id
GROUP BY st.store_id;

-- 4. Determine the average running time of films for each category
SELECT 
    c.name AS category,
    ROUND(AVG(f.length),2) AS avg_running_time
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time;

-- Bonus:
-- 5. Identify the film categories with the longest average running time.
SELECT * FROM film;
SELECT *FROM film_category;
SELECT * FROM category;
SELECT * FROM rental;

SELECT 
    c.name AS category,
    ROUND(AVG(f.length),2) AS avg_running_time
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY avg_running_time DESC;

-- 6.Display the top 10 most frequently rented movies in descending order
SELECT * FROM film;
SELECT * FROM rental;
SELECT * FROM inventory;
SELECT * FROM payment;

SELECT 
    f.title, COUNT(*) AS freq_rented
FROM
    rental r
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film f ON i.film_id = f.film_id
GROUP BY f.title
ORDER BY freq_rented DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM store; -- store_id
SELECT * FROM inventory;  -- film_id and store_id
SELECT * FROM film; -- film_id 

SELECT 
    title t, 
    i.store_id
FROM
    film f
        JOIN
    inventory i ON i.film_id = f.film_id
WHERE
    title = 'ACADEMY DINOSAUR'
        AND i.store_id = 1;
        
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    f.title,
    CASE 
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
GROUP BY f.film_id, f.title
ORDER BY f.title;
